# -*- coding: utf-8 -*-
"""Fake News Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pDVSgkF7YBwaOxZB8JRd6zgEB8lz4ZIr

**Fake News Detection Project**

Importing Libraries
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import RandomForestClassifier
import re
import string

"""Importing Datasets"""

fake = pd.read_csv("/content/Fake.csv")
true = pd.read_csv("/content/True.csv")

true.head()

fake.head()

true["label"]=1

fake["label"]=0

true.head()

fake.head()

"""Combining Datasets"""

news = pd.concat([fake, true], axis=0)

news.head()

news.tail()

news.isnull().sum()

"""Dropping Unnecessaries Columns"""

news = news.drop(['title','subject','date'], axis=1)

news.head()

"""Shuffling the rows

"""

news = news.sample(frac=1)

news.head()

"""Indexing"""

news.reset_index(inplace=True)

news.head()

"""Dropping the 'Index' column"""

news.drop(['index'], axis=1, inplace=True)

news.head()

"""Removing URLs, HTML tags, punctuation, digits and newline characters from the text"""

def wordopt(text):
    text = text.lower()
    text = re.sub(r'https?://\S+|www\.\S+','',text)
    text = re.sub(r'<.*?>','',text)
    text = re.sub(r'[^\w\s]', '', text)
    text = re.sub(r'\d','',text)
    text = re.sub(r'\n','',text)

    return text

news['text'] = news['text'].apply(wordopt)

news['text']

x = news['text']
y = news['label']

x

y

"""Traning and Testing the data"""

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = .3)

x_train.shape

x_test.shape

vectorization = TfidfVectorizer()

xv_train = vectorization.fit_transform(x_train)

xv_test = vectorization.transform(x_test)

xv_train

xv_test

"""Logistic Regression"""

LR = LogisticRegression()

LR.fit(xv_train, y_train)

pred_lr = LR.predict(xv_test)

LR.score(xv_test, y_test)

print(classification_report(y_test,pred_lr))

"""Decision Tree Classifier"""

DT = DecisionTreeClassifier()
DT.fit(xv_train, y_train)

pred_dt = DT.predict(xv_test)

DT.score(xv_test, y_test)

print(classification_report(y_test, pred_dt))

"""Gradient Boosting Classifier"""

GB = GradientBoostingClassifier(random_state = 0)
GB.fit(xv_train, y_train)

pred_gb = GB.predict(xv_test)

GB.score(xv_test, y_test)

print(classification_report(y_test, pred_gb))

"""Random Forest Classifier"""

RF = RandomForestClassifier(random_state = 0)
RF.fit(xv_train, y_train)

pred_rf = RF.predict(xv_test)

RF.score(xv_test, y_test)

print(classification_report(y_test, pred_rf))

"""Function for Testing the input news"""

def output_label(n):
    if  n == 0:
        return "Fake News"
    elif n == 1:
        return "Not a Fake News"

def manual_testing(news):
    testing_news = {"text":[news]}
    new_def_test = pd.DataFrame(testing_news)
    new_def_test["text"] = new_def_test["text"].apply(wordopt)
    new_x_test = new_def_test["text"]
    new_xv_test = vectorization.transform(new_x_test)
    pred_lr = LR.predict(new_xv_test)
    pred_dt = DT.predict(new_xv_test)
    pred_gb = GB.predict(new_xv_test)
    pred_rf = RF.predict(new_xv_test)

    return "LR Prediction: {}   DT Prediction: {}   RF Prediction: {}    GB Prediction: {}".format(
    output_label(pred_lr[0]), output_label(pred_dt[0]), output_label(pred_rf[0]), output_label(pred_gb[0]))

"""Input News Article"""

news_article = str(input())

"""Checking the Article is Fake or not"""

manual_testing(news_article)